<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  KhipuChaski
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace KhipuChaski\Model;

use \ArrayAccess;
/**
 * Device Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     KhipuChaski
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Device implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'token_id' => 'string',
        'recipients' => 'string[]',
        'extra_data' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'token_id' => 'tokenId',
        'recipients' => 'recipients',
        'extra_data' => 'extraData'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'token_id' => 'setTokenId',
        'recipients' => 'setRecipients',
        'extra_data' => 'setExtraData'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'token_id' => 'getTokenId',
        'recipients' => 'getRecipients',
        'extra_data' => 'getExtraData'
    );
  
    
    /**
      * $token_id token para notificaciones asociado al dispositivo. Tiene la forma <platform>:<registryId>, donde platform puede tomar los valores \"and\" o \"ios\".
      * @var string
      */
    protected $token_id;
    
    /**
      * $recipients Lista de receptores asociados al dispositivo
      * @var string[]
      */
    protected $recipients;
    
    /**
      * $extra_data informacion adicional del dispositivo
      * @var string
      */
    protected $extra_data;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->token_id = $data["token_id"];
            $this->recipients = $data["recipients"];
            $this->extra_data = $data["extra_data"];
        }
    }
    
    /**
     * Gets token_id
     * @return string
     */
    public function getTokenId()
    {
        return $this->token_id;
    }
  
    /**
     * Sets token_id
     * @param string $token_id token para notificaciones asociado al dispositivo. Tiene la forma <platform>:<registryId>, donde platform puede tomar los valores \"and\" o \"ios\".
     * @return $this
     */
    public function setTokenId($token_id)
    {
        
        $this->token_id = $token_id;
        return $this;
    }
    
    /**
     * Gets recipients
     * @return string[]
     */
    public function getRecipients()
    {
        return $this->recipients;
    }
  
    /**
     * Sets recipients
     * @param string[] $recipients Lista de receptores asociados al dispositivo
     * @return $this
     */
    public function setRecipients($recipients)
    {
        
        $this->recipients = $recipients;
        return $this;
    }
    
    /**
     * Gets extra_data
     * @return string
     */
    public function getExtraData()
    {
        return $this->extra_data;
    }
  
    /**
     * Sets extra_data
     * @param string $extra_data informacion adicional del dispositivo
     * @return $this
     */
    public function setExtraData($extra_data)
    {
        
        $this->extra_data = $extra_data;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
